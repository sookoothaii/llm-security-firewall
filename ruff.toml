# Ruff Configuration for LLM Security Firewall
# Creator: Joerg Bollwahn
# Date: 2025-10-30
#
# POLICY: FIX all errors, NO allowlist for convenience
#         Only exceptions: Intentional patterns (assert in tests, pseudo-random for non-crypto)

line-length = 88

[lint]
select = ["E", "F", "W", "I", "S"]
ignore = []

[lint.per-file-ignores]
# Tests: assert (S101) and pseudo-random (S311) intentional
"tests/**/*.py" = ["S101", "S311", "S603", "S607"]

# Benchmarks: pseudo-random (S311), insecure hash (S324), import after sys.path (E402)
"benchmarks/**/*.py" = ["S311", "E402"]

# Monitoring: pseudo-random for non-crypto (canaries)
"src/llm_firewall/monitoring/canaries.py" = ["S311"]

# Error handling: Intentional try-except patterns
"src/llm_firewall/persuasion/ac_trie.py" = ["S110"]
"src/llm_firewall/risk/risk_scorer.py" = ["S110"]
"src/llm_firewall/calibration/lodo.py" = ["S112"]

# E501 (Line-too-long) - Legitimate long lines (Regex patterns, detailed loggers, docstrings)
# Benchmarks: Logger output with metrics, insecure hash for non-crypto
"benchmarks/generate_dataset.py" = ["E501", "S324"]
"benchmarks/llm_redteam_eval.py" = ["E501"]
"benchmarks/persuasion_redteam_eval.py" = ["E501"]
"benchmarks/run_benchmarks.py" = ["E501"]

# Core/Engines: Complex log messages, docstrings
"src/llm_firewall/cli.py" = ["E501", "S603", "S607"]
"src/llm_firewall/core.py" = ["E501"]
"src/llm_firewall/core/ports/auth_port.py" = ["E501"]
"src/llm_firewall/adapters/auth/spatial_captcha_adapter.py" = ["E501"]
"src/llm_firewall/engines/decision_engine.py" = ["E501"]
"src/llm_firewall/engines/explanation_formatter.py" = ["E501"]
"src/llm_firewall/engines/feedback_learner.py" = ["E501"]

# Evidence: Detailed log messages
"src/llm_firewall/evidence/ground_truth_scorer.py" = ["E501"]
"src/llm_firewall/evidence/source_verifier.py" = ["E501"]
"src/llm_firewall/evidence/validator.py" = ["E501"]

# Fusion: Algorithm explanations
"src/llm_firewall/fusion/adaptive_threshold.py" = ["E501"]
"src/llm_firewall/fusion/robbins_monro.py" = ["E501"]

# Monitoring: Detailed debug output
"src/llm_firewall/monitoring/explain_why.py" = ["E501"]
"src/llm_firewall/monitoring/shingle_hasher.py" = ["E501"]

# Persuasion: Docstrings with detailed explanations
"src/llm_firewall/persuasion/invariance_gate.py" = ["E501"]
"src/llm_firewall/persuasion/l3_classifier.py" = ["E501"]
"src/llm_firewall/persuasion/neutralizer.py" = ["E501"]

# Rules: Complex regex patterns (unbreakable without destroying readability)
"src/llm_firewall/rules/patterns.py" = ["E501"]
"src/llm_firewall/rules/patterns_v2.py" = ["E501"]

# Safety: Detailed log messages with multiple metrics
"src/llm_firewall/safety/band_judge.py" = ["E501"]
"src/llm_firewall/safety/embedding_detector.py" = ["E501"]
"src/llm_firewall/safety/ensemble_validator.py" = ["E501"]
"src/llm_firewall/safety/gpt5_detector.py" = ["E501"]
"src/llm_firewall/safety/input_ensemble.py" = ["E501"]
"src/llm_firewall/safety/llm_judge.py" = ["E501"]
"src/llm_firewall/safety/validator.py" = ["E501"]

# Spatial: Challenge generation with detailed params
"src/llm_firewall/spatial/generator.py" = ["E501", "S311"]

# Tests: Long explanatory comments
"tests/judges/test_nli_consistency.py" = ["E501"]
"tests/test_canonicalizer_required.py" = ["E501"]
"tests/test_dempster_shafer_fusion.py" = ["E501"]
"tests/test_gapped_regex.py" = ["E501"]
"tests/test_shingle_hasher.py" = ["E501"]
"tests/test_statistics_tracker.py" = ["E501"]
"tests/test_obfuscation_guard.py" = ["E402", "E501"]
"tests/test_safe_bandit.py" = ["E402"]
"tests/test_policy_verify_invariant.py" = ["E402"]

# CLI: Policy verifier with detailed messages
"cli/llmfw_policy_verify.py" = ["E501", "E701", "E712"]

# Calibration: Safe bandit with mathematical formulas
"src/llm_firewall/calibration/safe_bandit.py" = ["E501", "E701", "E702"]

# GuardNet: Multi-task model with detailed docstrings and training logs
"src/llm_firewall/guardnet/model.py" = ["E501", "W293"]
"src/llm_firewall/guardnet/train.py" = ["E501", "W293"]
"tests/test_guardnet_shapes.py" = ["E501"]
"tests/test_feature_extractor.py" = ["E501"]

# Tools: Development utilities with compact code style
"tools/ablate.py" = ["E501", "E701", "E702"]
"tools/calibrate_thresholds.py" = ["E501"]
"tools/convert_redteam_to_csv.py" = ["E501"]
"tools/extract_from_redteam.py" = ["E501"]
"tools/fit_meta_ensemble.py" = ["E501"]
"tools/floors_fit.py" = ["E501", "E701", "E702"]
"tools/generate_coverage_report.py" = ["E501"]
"tools/json_validate.py" = ["E501"]
"tools/kill_switch.py" = ["E501"]
"tools/merge_lexicons.py" = ["E501", "E701", "E702"]

# Scripts: Training and build scripts with detailed parameters
"scripts/build_onnx_logreg.py" = ["E501", "F841"]
"scripts/ci_gate.py" = ["E702"]
"scripts/generate_l3_data.py" = ["E501"]
"scripts/train_l3_sklearn.py" = ["E501", "E402"]

# Examples: Demo code with detailed usage examples
"examples/demo_multi_gate.py" = ["E501"]
"examples/minimal_fastapi.py" = ["E501"]

# Extract utility
"extract_all.py" = ["E501"]

# Plugins: Detailed docstrings and explanations
"plugins/biometrics/__init__.py" = ["E501"]
"plugins/biometrics/biometrics_adapter.py" = ["E501"]
"plugins/care/care_adapter.py" = ["E501"]
"plugins/care/scientific_validation.py" = ["E501"]
"plugins/personality/personality_adapter.py" = ["E501"]
"plugins/personality/personality_module.py" = ["E501"]

# GuardNet: Detailed docstrings for ML model
"src/llm_firewall/guardnet/__init__.py" = ["E501"]
"src/llm_firewall/guardnet/export_onnx.py" = ["E501"]
"src/llm_firewall/guardnet/features/extractor.py" = ["E501"]
"src/llm_firewall/guardnet/gate_integration.py" = ["E501"]
