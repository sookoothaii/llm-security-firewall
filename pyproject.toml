[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "llm-security-firewall"
version = "5.0.0rc1"
description = "Bidirectional Security Framework for Human/LLM Interfaces - 9 Core + 27 Hardening Layers, 597 Tests (100% PASS), MyPy Clean, CI GREEN"
authors = [{name = "Joerg Bollwahn", email = "info@hakgal.org"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["llm", "security", "firewall", "ai-safety", "adversarial-robustness", "memory-poisoning", "evidence-validation", "dempster-shafer", "conformal-prediction"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: 3.15",
    "Topic :: Security",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    "pyyaml>=6.0",
    "blake3>=0.3.0",
    "requests>=2.31.0",
    "psycopg[binary]>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
]
monitoring = [
    "prometheus-client>=0.17.0",
]

# Optional Plugins ("Niemand muss aber jeder darf")
personality = [
    "psycopg3>=3.2.12",
    "numpy>=1.24.0",
]
biometrics = [
    "psycopg3>=3.2.12",
    "scikit-learn>=1.3.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
]
care = [
    "psycopg3>=3.2.12",
    "prometheus-client>=0.17.0",
    "numpy>=1.24.0",
]
full = [
    "llm-security-firewall[personality,biometrics,care,monitoring]",
]

[project.urls]
Homepage = "https://github.com/sookoothaii/llm-security-firewall"
Repository = "https://github.com/sookoothaii/llm-security-firewall"
Issues = "https://github.com/sookoothaii/llm-security-firewall/issues"
Changelog = "https://github.com/sookoothaii/llm-security-firewall/blob/main/CHANGELOG.md"

[project.scripts]
llm-firewall = "llm_firewall.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --strict-markers"

[tool.coverage.run]
source = ["src/llm_firewall"]
omit = ["*/tests/*", "*/examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.ruff]
line-length = 88

[tool.ruff.lint]
# Ignored rules:
# S101: assert in tests (pytest standard)
# S105: hardcoded test passwords (safe fixtures)
# E501: line length (handled by formatter)
# S110/S112: try-except-pass (defensive coding)
# E722: bare except (legacy code)
# E402: imports after sys.path manipulation (script pattern)
# F841: unused variables in tests (intentional placeholders)
# E701: multiple statements on one line (compact test helpers)
# S104: binding to all interfaces (examples only)
# F601: duplicate dict keys (false positive in multilingual)
ignore = [
    "S101", "S105", "E501", "S110", "S112", "E722", 
    "E402", "F841", "E701", "S104", "F601"
]
